x
#Finally, adding a row to the 132 data frame to predict Spring 2024
CU_Calc_Enrl_Spring_132[10,1] = "Spring 2024"
CU_Calc_Enrl_Spring_132[10,2] = 0
CU_Calc_Enrl_Spring_132[10,3] = 132
CU_Calc_Enrl_Spring_132[10,4] = "MA"
#Prediction value
CU_Calc_Enrl_Spring_132[10,5] = Scalar_132*CU_Calc_Enrl_Spring_132[9,2] + Scalar_131*CU_Calc_Enrl_Fall_131[10,2]
#Filling out column six for completeness
CU_Calc_Enrl_Spring_132[10,6] = CU_Calc_Enrl_Spring_132[10,5] - CU_Calc_Enrl_Spring_132[10,2]
#Scalars for 131 and 132 to be able to more easily tune the model
Scalar_131 = 0.76;
Scalar_132 = 0.05;
#Sets a fifth column in the Spring 132 data frame where it lists the predicted value for student #enrollment
CU_Calc_Enrl_Spring_132[1,5] = Scalar_131*CU_Calc_Enrl_Fall_131[1,2]
#Sets a sixth column where it finds the difference between the prediction and the actual value.
CU_Calc_Enrl_Spring_132[1,6] = CU_Calc_Enrl_Spring_132[1,5] - CU_Calc_Enrl_Spring_132[1,2]
#A for loop that steps through all rows after the first
for (i in 2:nrow(CU_Calc_Enrl_Spring_132)) {
CU_Calc_Enrl_Spring_132[i,5] = (Scalar_131*CU_Calc_Enrl_Fall_131[i,2]) + (Scalar_132*CU_Calc_Enrl_Spring_132[i-1,2])
CU_Calc_Enrl_Spring_132[i,6] = CU_Calc_Enrl_Spring_132[i,5] - CU_Calc_Enrl_Spring_132[i,2]
}
#Sum of column 6 used to optimize
x = 0;
for (i in 1:nrow(CU_Calc_Enrl_Spring_132)) {
x = x + CU_Calc_Enrl_Spring_132[i,6]
}
x
#Scalars for 131 and 132 to be able to more easily tune the model
Scalar_131 = 0.74;
Scalar_132 = 0.05;
#Sets a fifth column in the Spring 132 data frame where it lists the predicted value for student #enrollment
CU_Calc_Enrl_Spring_132[1,5] = Scalar_131*CU_Calc_Enrl_Fall_131[1,2]
#Sets a sixth column where it finds the difference between the prediction and the actual value.
CU_Calc_Enrl_Spring_132[1,6] = CU_Calc_Enrl_Spring_132[1,5] - CU_Calc_Enrl_Spring_132[1,2]
#A for loop that steps through all rows after the first
for (i in 2:nrow(CU_Calc_Enrl_Spring_132)) {
CU_Calc_Enrl_Spring_132[i,5] = (Scalar_131*CU_Calc_Enrl_Fall_131[i,2]) + (Scalar_132*CU_Calc_Enrl_Spring_132[i-1,2])
CU_Calc_Enrl_Spring_132[i,6] = CU_Calc_Enrl_Spring_132[i,5] - CU_Calc_Enrl_Spring_132[i,2]
}
#Sum of column 6 used to optimize
x = 0;
for (i in 1:nrow(CU_Calc_Enrl_Spring_132)) {
x = x + CU_Calc_Enrl_Spring_132[i,6]
}
x
#Finally, adding a row to the 132 data frame to predict Spring 2024
CU_Calc_Enrl_Spring_132[10,1] = "Spring 2024"
CU_Calc_Enrl_Spring_132[10,2] = 0
CU_Calc_Enrl_Spring_132[10,3] = 132
CU_Calc_Enrl_Spring_132[10,4] = "MA"
#Prediction value
CU_Calc_Enrl_Spring_132[10,5] = Scalar_132*CU_Calc_Enrl_Spring_132[9,2] + Scalar_131*CU_Calc_Enrl_Fall_131[10,2]
#Filling out column six for completeness
CU_Calc_Enrl_Spring_132[10,6] = CU_Calc_Enrl_Spring_132[10,5] - CU_Calc_Enrl_Spring_132[10,2]
library(skimr)
library(readr)
library(tidyverse)
library(here)
CU_ACAD_DEPT_WHEN_OFF_ENRL <- read_csv(here("data_raw", "CU_ACAD_DEPT_WHEN_OFF_ENRL.csv"))
View(CU_ACAD_DEPT_WHEN_OFF_ENRL)
CU <- CU_ACAD_DEPT_WHEN_OFF_ENRL
skim(CU)
CU_Calc <- CU %>%
select(Subject, Catalog, Term...8, Component, `Tot Enrl`) %>% distinct()
CU_Calc_1 <- filter(CU_Calc, Subject == "MA",  Catalog %in% c(120, 125, 131, 132), Component == "LEC")
head(CU_Calc_1)
CU_Calc_Enrl_Per_Term=CU_Calc_1 %>%
group_by(Catalog, Term...8) %>%
mutate(Enrl_By_Term_Cat = sum(`Tot Enrl`)) %>%
distinct(Enrl_By_Term_Cat, Catalog, Subject)
head(CU_Calc_Enrl_Per_Term)
CU_Calc_Enrl_Fall_131 = CU_Calc_Enrl_Per_Term%>%
filter(Catalog == "131", Term...8 %in% c("Fall 2014", "Fall 2015", "Fall 2016", "Fall 2017", "Fall 2018", "Fall 2019", "Fall 2020", "Fall 2021", "Fall 2022", "Fall 2023"))
head(CU_Calc_Enrl_Fall_131)
CU_Calc_Enrl_Spring_132 = CU_Calc_Enrl_Per_Term%>%
filter(Catalog == "132", Term...8 %in% c("Spring 2014", "Spring 2015", "Spring 2016", "Spring 2017", "Spring 2018", "Spring 2019", "Spring 2020", "Spring 2021", "Spring 2022", "Spring 2023"))
head(CU_Calc_Enrl_Spring_132)
CU_Calc_Enrl_Fall_132 = CU_Calc_Enrl_Per_Term%>%
filter(Catalog == "132", Term...8 %in% c("Fall 2014", "Fall 2015", "Fall 2016", "Fall 2017", "Fall 2018", "Fall 2019", "Fall 2020", "Fall 2021", "Fal 2022", "Fall 2023"))
head(CU_Calc_Enrl_Fall_132)
#Scalars for 131 and 132 to be able to more easily tune the model
Scalar_131 = 0.74;
Scalar_132 = 0.05;
#Sets a fifth column in the Spring 132 data frame where it lists the predicted value for student #enrollment
CU_Calc_Enrl_Spring_132[1,5] = Scalar_131*CU_Calc_Enrl_Fall_131[1,2]
#Sets a sixth column where it finds the difference between the prediction and the actual value.
CU_Calc_Enrl_Spring_132[1,6] = CU_Calc_Enrl_Spring_132[1,5] - CU_Calc_Enrl_Spring_132[1,2]
#A for loop that steps through all rows after the first
for (i in 2:nrow(CU_Calc_Enrl_Spring_132)) {
CU_Calc_Enrl_Spring_132[i,5] = (Scalar_131*CU_Calc_Enrl_Fall_131[i,2]) + (Scalar_132*CU_Calc_Enrl_Spring_132[i-1,2])
CU_Calc_Enrl_Spring_132[i,6] = CU_Calc_Enrl_Spring_132[i,5] - CU_Calc_Enrl_Spring_132[i,2]
}
#Sum of column 6 used to optimize
x = 0;
for (i in 1:nrow(CU_Calc_Enrl_Spring_132)) {
x = x + CU_Calc_Enrl_Spring_132[i,6]
}
x
#Finally, adding a row to the 132 data frame to predict Spring 2024
CU_Calc_Enrl_Spring_132[10,1] = "Spring 2024"
CU_Calc_Enrl_Spring_132[10,2] = 0
CU_Calc_Enrl_Spring_132[10,3] = 132
CU_Calc_Enrl_Spring_132[10,4] = "MA"
#Prediction value
CU_Calc_Enrl_Spring_132[10,5] = Scalar_132*CU_Calc_Enrl_Spring_132[9,2] + Scalar_131*CU_Calc_Enrl_Fall_131[10,2]
#Filling out column six for completeness
CU_Calc_Enrl_Spring_132[10,6] = CU_Calc_Enrl_Spring_132[10,5] - CU_Calc_Enrl_Spring_132[10,2]
View(CU_Calc_Enrl_Fall_132)
#Scalars for 131 and 132 to be able to more easily tune the model
Scalar_131 = 0.74;
Scalar_S132 = 0.05;
Scalar_F132 = 0.03
#Sets a fifth column in the Spring 132 data frame where it lists the predicted value for student #enrollment
CU_Calc_Enrl_Spring_132[1,5] = Scalar_131*CU_Calc_Enrl_Fall_131[1,2] + Scalar_F132*CU_Calc_Enrl_Fall_132[1,2]
#Sets a sixth column where it finds the difference between the prediction and the actual value.
CU_Calc_Enrl_Spring_132[1,6] = CU_Calc_Enrl_Spring_132[1,5] - CU_Calc_Enrl_Spring_132[1,2]
#A for loop that steps through all rows after the first
for (i in 2:nrow(CU_Calc_Enrl_Spring_132)) {
CU_Calc_Enrl_Spring_132[i,5] = (Scalar_131*CU_Calc_Enrl_Fall_131[i,2]) + (Scalar_S132*CU_Calc_Enrl_Spring_132[i-1,2]) + (Scalar_F132*CU_Calc_Enrl_Fall_132[i,2])
CU_Calc_Enrl_Spring_132[i,6] = CU_Calc_Enrl_Spring_132[i,5] - CU_Calc_Enrl_Spring_132[i,2]
}
#Sum of column 6 used to optimize
x = 0;
for (i in 1:nrow(CU_Calc_Enrl_Spring_132)) {
x = x + CU_Calc_Enrl_Spring_132[i,6]
}
x
#Finally, adding a row to the 132 data frame to predict Spring 2024
CU_Calc_Enrl_Spring_132[10,1] = "Spring 2024"
CU_Calc_Enrl_Spring_132[10,2] = 0
CU_Calc_Enrl_Spring_132[10,3] = 132
CU_Calc_Enrl_Spring_132[10,4] = "MA"
#Prediction value
CU_Calc_Enrl_Spring_132[10,5] = Scalar_S132*CU_Calc_Enrl_Spring_132[9,2] + Scalar_131*CU_Calc_Enrl_Fall_131[10,2] + Scalar_F132*CU_Calc_Enrl_Fall_132[9,2]
#Filling out column six for completeness
CU_Calc_Enrl_Spring_132[10,6] = CU_Calc_Enrl_Spring_132[10,5] - CU_Calc_Enrl_Spring_132[10,2]
#Scalars for 131 and 132 to be able to more easily tune the model
Scalar_131 = 0.74;
Scalar_S132 = 0.05;
Scalar_F132 = 0.03
#Sets a fifth column in the Spring 132 data frame where it lists the predicted value for student #enrollment
CU_Calc_Enrl_Spring_132[1,5] = Scalar_131*CU_Calc_Enrl_Fall_131[1,2] + Scalar_F132*CU_Calc_Enrl_Fall_132[1,2]
#Sets a sixth column where it finds the difference between the prediction and the actual value.
CU_Calc_Enrl_Spring_132[1,6] = CU_Calc_Enrl_Spring_132[1,5] - CU_Calc_Enrl_Spring_132[1,2]
#A for loop that steps through all rows after the first
for (i in 2:nrow(CU_Calc_Enrl_Spring_132)) {
CU_Calc_Enrl_Spring_132[i,5] = (Scalar_131*CU_Calc_Enrl_Fall_131[i,2]) + (Scalar_S132*CU_Calc_Enrl_Spring_132[i-1,2]) + (Scalar_F132*CU_Calc_Enrl_Fall_132[i,2])
CU_Calc_Enrl_Spring_132[i,6] = CU_Calc_Enrl_Spring_132[i,5] - CU_Calc_Enrl_Spring_132[i,2]
}
#Sum of column 6 used to optimize
x = 0;
for (i in 1:nrow(CU_Calc_Enrl_Spring_132)) {
x = x + CU_Calc_Enrl_Spring_132[i,6]
}
x
nrow(CU_Calc_Enrl_Spring_132)
#Scalars for 131 and 132 to be able to more easily tune the model
Scalar_131 = 0.74;
Scalar_S132 = 0.05;
Scalar_F132 = 0.03;
#Sets a fifth column in the Spring 132 data frame where it lists the predicted value for student #enrollment
CU_Calc_Enrl_Spring_132[1,5] = Scalar_131*CU_Calc_Enrl_Fall_131[1,2] + Scalar_F132*CU_Calc_Enrl_Fall_132[1,2]
#Sets a sixth column where it finds the difference between the prediction and the actual value.
CU_Calc_Enrl_Spring_132[1,6] = CU_Calc_Enrl_Spring_132[1,5] - CU_Calc_Enrl_Spring_132[1,2]
#A for loop that steps through all rows after the first
for (i in 2:nrow(CU_Calc_Enrl_Spring_132)) {
CU_Calc_Enrl_Spring_132[i,5] = (Scalar_131*CU_Calc_Enrl_Fall_131[i,2]) + (Scalar_S132*CU_Calc_Enrl_Spring_132[i-1,2]) + (Scalar_F132*CU_Calc_Enrl_Fall_132[i,2])
CU_Calc_Enrl_Spring_132[i,6] = CU_Calc_Enrl_Spring_132[i,5] - CU_Calc_Enrl_Spring_132[i,2]
}
#Sum of column 6 used to optimize
x = 0;
for (i in 1:nrow(CU_Calc_Enrl_Spring_132)) {
x = x + CU_Calc_Enrl_Spring_132[i,6]
}
x
#Finally, adding a row to the 132 data frame to predict Spring 2024
CU_Calc_Enrl_Spring_132[10,1] = "Spring 2024"
CU_Calc_Enrl_Spring_132[10,2] = 0
CU_Calc_Enrl_Spring_132[10,3] = 132
CU_Calc_Enrl_Spring_132[10,4] = "MA"
#Prediction value
CU_Calc_Enrl_Spring_132[10,5] = Scalar_S132*CU_Calc_Enrl_Spring_132[9,2] + Scalar_131*CU_Calc_Enrl_Fall_131[10,2] + Scalar_F132*CU_Calc_Enrl_Fall_132[9,2]
#Filling out column six for completeness
CU_Calc_Enrl_Spring_132[10,6] = CU_Calc_Enrl_Spring_132[10,5] - CU_Calc_Enrl_Spring_132[10,2]
CU_Calc_Enrl_Fall_132 = CU_Calc_Enrl_Per_Term %>%
filter(Catalog == "132", Term...8 %in% c("Fall 2014", "Fall 2015", "Fall 2016", "Fall 2017", "Fall 2018", "Fall 2019", "Fall 2020", "Fall 2021", "Fall 2022", "Fall 2023"))
head(CU_Calc_Enrl_Fall_132)
#Scalars for 131 and 132 to be able to more easily tune the model
Scalar_131 = 0.74;
Scalar_S132 = 0.05;
Scalar_F132 = 0.03;
#Sets a fifth column in the Spring 132 data frame where it lists the predicted value for student #enrollment
CU_Calc_Enrl_Spring_132[1,5] = Scalar_131*CU_Calc_Enrl_Fall_131[1,2] + Scalar_F132*CU_Calc_Enrl_Fall_132[1,2]
#Sets a sixth column where it finds the difference between the prediction and the actual value.
CU_Calc_Enrl_Spring_132[1,6] = CU_Calc_Enrl_Spring_132[1,5] - CU_Calc_Enrl_Spring_132[1,2]
#A for loop that steps through all rows after the first
for (i in 2:nrow(CU_Calc_Enrl_Spring_132)) {
CU_Calc_Enrl_Spring_132[i,5] = (Scalar_131*CU_Calc_Enrl_Fall_131[i,2]) + (Scalar_S132*CU_Calc_Enrl_Spring_132[i-1,2]) + (Scalar_F132*CU_Calc_Enrl_Fall_132[i,2])
CU_Calc_Enrl_Spring_132[i,6] = CU_Calc_Enrl_Spring_132[i,5] - CU_Calc_Enrl_Spring_132[i,2]
}
#Sum of column 6 used to optimize
x = 0;
for (i in 1:nrow(CU_Calc_Enrl_Spring_132)) {
x = x + CU_Calc_Enrl_Spring_132[i,6]
}
x
#Finally, adding a row to the 132 data frame to predict Spring 2024
CU_Calc_Enrl_Spring_132[10,1] = "Spring 2024"
CU_Calc_Enrl_Spring_132[10,2] = 0
CU_Calc_Enrl_Spring_132[10,3] = 132
CU_Calc_Enrl_Spring_132[10,4] = "MA"
#Prediction value
CU_Calc_Enrl_Spring_132[10,5] = Scalar_S132*CU_Calc_Enrl_Spring_132[9,2] + Scalar_131*CU_Calc_Enrl_Fall_131[10,2] + Scalar_F132*CU_Calc_Enrl_Fall_132[9,2]
#Filling out column six for completeness
CU_Calc_Enrl_Spring_132[10,6] = CU_Calc_Enrl_Spring_132[10,5] - CU_Calc_Enrl_Spring_132[10,2]
?sort
CU_Calc_Enrl_Fall_132 = sort(CU_Calc_Enrl_Fall_132$Term...8, decreasing = TRUE)
View(CU_ACAD_DEPT_WHEN_OFF_ENRL)
CU_Calc <- CU %>%
select(Subject, Catalog, Term...7, Term...8, Component, `Tot Enrl`) %>% distinct()
CU_Calc_1 <- filter(CU_Calc, Subject == "MA",  Catalog %in% c(120, 125, 131, 132), Component == "LEC")
head(CU_Calc_1)
CU_Calc_Enrl_Per_Term=CU_Calc_1 %>%
group_by(Catalog, Term...8) %>%
mutate(Enrl_By_Term_Cat = sum(`Tot Enrl`)) %>%
distinct(Enrl_By_Term_Cat, Catalog, Subject)
head(CU_Calc_Enrl_Per_Term)
CU_Calc_Enrl_Fall_131 = CU_Calc_Enrl_Per_Term%>%
filter(Catalog == "131", Term...8 %in% c("Fall 2014", "Fall 2015", "Fall 2016", "Fall 2017", "Fall 2018", "Fall 2019", "Fall 2020", "Fall 2021", "Fall 2022", "Fall 2023"))
head(CU_Calc_Enrl_Fall_131)
CU_Calc_Enrl_Per_Term=CU_Calc_1 %>%
group_by(Catalog, Term...7, Term...8) %>%
mutate(Enrl_By_Term_Cat = sum(`Tot Enrl`)) %>%
distinct(Enrl_By_Term_Cat, Catalog, Subject)
head(CU_Calc_Enrl_Per_Term)
CU_Calc_Enrl_Fall_131 = CU_Calc_Enrl_Per_Term%>%
filter(Catalog == "131", Term...8 %in% c("Fall 2014", "Fall 2015", "Fall 2016", "Fall 2017", "Fall 2018", "Fall 2019", "Fall 2020", "Fall 2021", "Fall 2022", "Fall 2023"))
head(CU_Calc_Enrl_Fall_131)
CU_Calc_Enrl_Spring_132 = CU_Calc_Enrl_Per_Term%>%
filter(Catalog == "132", Term...8 %in% c("Spring 2014", "Spring 2015", "Spring 2016", "Spring 2017", "Spring 2018", "Spring 2019", "Spring 2020", "Spring 2021", "Spring 2022", "Spring 2023"))
head(CU_Calc_Enrl_Spring_132)
CU_Calc_Enrl_Fall_132 = CU_Calc_Enrl_Per_Term %>%
filter(Catalog == "132", Term...8 %in% c("Fall 2014", "Fall 2015", "Fall 2016", "Fall 2017", "Fall 2018", "Fall 2019", "Fall 2020", "Fall 2021", "Fall 2022", "Fall 2023"))
head(CU_Calc_Enrl_Fall_132)
CU_Calc_Enrl_Fall_132 = sort(CU_Calc_Enrl_Fall_132$Term...7, decreasing = FALSE)
CU_Calc_Enrl_Fall_132 = sort(CU_Calc_Enrl_Fall_132, decreasing = FALSE)
CU_Calc_Enrl_Fall_132 = CU_Calc_Enrl_Per_Term %>%
filter(Catalog == "132", Term...8 %in% c("Fall 2014", "Fall 2015", "Fall 2016", "Fall 2017", "Fall 2018", "Fall 2019", "Fall 2020", "Fall 2021", "Fall 2022", "Fall 2023"))
CU_Calc_Enrl_Fall_132 = order(CU_Calc_Enrl_Fall_132$Term...7, decreasing = FALSE)
?order
?sort.ist
?sort.list
CU_Calc_Enrl_Fall_132 = sort.list(CU_Calc_Enrl_Fall_132$Term...7, decreasing = FALSE)
CU_Calc_Enrl_Fall_132[order(CU_Calc_Enrl_Fall_132$Term...7, decreasing = FALSE)]
CU_Calc_Enrl_Fall_132[order(CU_Calc_Enrl_Fall_132$Term...7)]
CU_Calc_Enrl_Fall_132 = CU_Calc_Enrl_Per_Term %>%
filter(Catalog == "132", Term...8 %in% c("Fall 2014", "Fall 2015", "Fall 2016", "Fall 2017", "Fall 2018", "Fall 2019", "Fall 2020", "Fall 2021", "Fall 2022", "Fall 2023"))
head(CU_Calc_Enrl_Fall_132)
CU_Calc_Enrl_Fall_132 = arrange(CU_Calc_Enrl_Fall_132$Term...7)
CU_Calc_Enrl_Fall_132 = arrange(CU_Calc_Enrl_Fall_132)
?arrange
CU_Calc_Enrl_Fall_132 = arrange(CU_Calc_Enrl_Fall_132, Term...7)
#Scalars for 131 and 132 to be able to more easily tune the model
Scalar_131 = 0.74;
Scalar_S132 = 0.05;
Scalar_F132 = 0.03;
#Sets a fifth column in the Spring 132 data frame where it lists the predicted value for student #enrollment
CU_Calc_Enrl_Spring_132[1,5] = Scalar_131*CU_Calc_Enrl_Fall_131[1,2] + Scalar_F132*CU_Calc_Enrl_Fall_132[1,2]
CU_Calc_Enrl_Fall_132 = CU_Calc_Enrl_Per_Term %>%
filter(Catalog == "132", Term...8 %in% c("Fall 2014", "Fall 2015", "Fall 2016", "Fall 2017", "Fall 2018", "Fall 2019", "Fall 2020", "Fall 2021", "Fall 2022", "Fall 2023"))
#Scalars for 131 and 132 to be able to more easily tune the model
Scalar_131 = 0.74;
Scalar_S132 = 0.05;
Scalar_F132 = 0.03;
#Sets a fifth column in the Spring 132 data frame where it lists the predicted value for student #enrollment
CU_Calc_Enrl_Spring_132[1,5] = Scalar_131*CU_Calc_Enrl_Fall_131[1,2] + Scalar_F132*CU_Calc_Enrl_Fall_132[1,2]
CU_Calc_Enrl_Fall_132 = arrange(CU_Calc_Enrl_Fall_132, Term...7)
#Scalars for 131 and 132 to be able to more easily tune the model
Scalar_131 = 0.74;
Scalar_S132 = 0.05;
Scalar_F132 = 0.03;
#Sets a fifth column in the Spring 132 data frame where it lists the predicted value for student #enrollment
CU_Calc_Enrl_Spring_132[1,6] = Scalar_131*CU_Calc_Enrl_Fall_131[1,2] + Scalar_F132*CU_Calc_Enrl_Fall_132[1,2]
#Scalars for 131 and 132 to be able to more easily tune the model
Scalar_131 = 0.74;
Scalar_S132 = 0.05;
Scalar_F132 = 0.03;
#Sets a fifth column in the Spring 132 data frame where it lists the predicted value for student #enrollment
CU_Calc_Enrl_Spring_132[1,6] = Scalar_131*CU_Calc_Enrl_Fall_131[1,3] + Scalar_F132*CU_Calc_Enrl_Fall_132[1,3]
#Sets a sixth column where it finds the difference between the prediction and the actual value.
CU_Calc_Enrl_Spring_132[1,7] = CU_Calc_Enrl_Spring_132[1,6] - CU_Calc_Enrl_Spring_132[1,3]
#A for loop that steps through all rows after the first
for (i in 2:nrow(CU_Calc_Enrl_Spring_132)) {
CU_Calc_Enrl_Spring_132[i,6] = (Scalar_131*CU_Calc_Enrl_Fall_131[i,3]) + (Scalar_S132*CU_Calc_Enrl_Spring_132[i-1,3]) + (Scalar_F132*CU_Calc_Enrl_Fall_132[i,3])
CU_Calc_Enrl_Spring_132[i,7] = CU_Calc_Enrl_Spring_132[i,6] - CU_Calc_Enrl_Spring_132[i,3]
}
#Sum of column 6 used to optimize
x = 0;
for (i in 1:nrow(CU_Calc_Enrl_Spring_132)) {
x = x + CU_Calc_Enrl_Spring_132[i,7]
}
x
#Finally, adding a row to the 132 data frame to predict Spring 2024
CU_Calc_Enrl_Spring_132[10,1] = 4242
CU_Calc_Enrl_Spring_132[10,2] = "Spring 2024"
CU_Calc_Enrl_Spring_132[10,3] = 0
CU_Calc_Enrl_Spring_132[10,4] = 132
CU_Calc_Enrl_Spring_132[10,5] = "MA"
#Prediction value
CU_Calc_Enrl_Spring_132[10,6] = Scalar_S132*CU_Calc_Enrl_Spring_132[9,3] + Scalar_131*CU_Calc_Enrl_Fall_131[10,3] + Scalar_F132*CU_Calc_Enrl_Fall_132[9,3]
#Filling out column six for completeness
CU_Calc_Enrl_Spring_132[10,7] = CU_Calc_Enrl_Spring_132[10,6] - CU_Calc_Enrl_Spring_132[10,3]
#Scalars for 131 and 132 to be able to more easily tune the model
Scalar_131 = 0.74;
Scalar_S132 = 0.05;
Scalar_F132 = 0.03;
#Sets a fifth column in the Spring 132 data frame where it lists the predicted value for student #enrollment
CU_Calc_Enrl_Spring_132[1,6] = Scalar_131*CU_Calc_Enrl_Fall_131[1,3] + Scalar_F132*CU_Calc_Enrl_Fall_132[1,3]
#Sets a sixth column where it finds the difference between the prediction and the actual value.
CU_Calc_Enrl_Spring_132[1,7] = CU_Calc_Enrl_Spring_132[1,6] - CU_Calc_Enrl_Spring_132[1,3]
#A for loop that steps through all rows after the first
for (i in 2:nrow(CU_Calc_Enrl_Spring_132)) {
CU_Calc_Enrl_Spring_132[i,6] = (Scalar_131*CU_Calc_Enrl_Fall_131[i,3]) + (Scalar_S132*CU_Calc_Enrl_Spring_132[i-1,3]) + (Scalar_F132*CU_Calc_Enrl_Fall_132[i,3])
CU_Calc_Enrl_Spring_132[i,7] = CU_Calc_Enrl_Spring_132[i,6] - CU_Calc_Enrl_Spring_132[i,3]
}
#Sum of column 6 used to optimize
x = 0;
for (i in 1:nrow(CU_Calc_Enrl_Spring_132)-1) {
x = x + CU_Calc_Enrl_Spring_132[i,7]
}
#Scalars for 131 and 132 to be able to more easily tune the model
Scalar_131 = 0.74;
Scalar_S132 = 0.05;
Scalar_F132 = 0.03;
#Sets a fifth column in the Spring 132 data frame where it lists the predicted value for student #enrollment
CU_Calc_Enrl_Spring_132[1,6] = Scalar_131*CU_Calc_Enrl_Fall_131[1,3] + Scalar_F132*CU_Calc_Enrl_Fall_132[1,3]
#Sets a sixth column where it finds the difference between the prediction and the actual value.
CU_Calc_Enrl_Spring_132[1,7] = CU_Calc_Enrl_Spring_132[1,6] - CU_Calc_Enrl_Spring_132[1,3]
#A for loop that steps through all rows after the first
for (i in 2:nrow(CU_Calc_Enrl_Spring_132)) {
CU_Calc_Enrl_Spring_132[i,6] = (Scalar_131*CU_Calc_Enrl_Fall_131[i,3]) + (Scalar_S132*CU_Calc_Enrl_Spring_132[i-1,3]) + (Scalar_F132*CU_Calc_Enrl_Fall_132[i,3])
CU_Calc_Enrl_Spring_132[i,7] = CU_Calc_Enrl_Spring_132[i,6] - CU_Calc_Enrl_Spring_132[i,3]
}
#Sum of column 6 used to optimize
x = 0;
for (i in 1:nrow(CU_Calc_Enrl_Spring_132)) {
x = x + CU_Calc_Enrl_Spring_132[i,7]
}
x
#Finally, adding a row to the 132 data frame to predict Spring 2024
CU_Calc_Enrl_Spring_132[10,1] = 4242
CU_Calc_Enrl_Spring_132[10,2] = "Spring 2024"
CU_Calc_Enrl_Spring_132[10,3] = 0
CU_Calc_Enrl_Spring_132[10,4] = 132
CU_Calc_Enrl_Spring_132[10,5] = "MA"
#Prediction value
CU_Calc_Enrl_Spring_132[10,6] = Scalar_S132*CU_Calc_Enrl_Spring_132[9,3] + Scalar_131*CU_Calc_Enrl_Fall_131[10,3] + Scalar_F132*CU_Calc_Enrl_Fall_132[9,3]
#Filling out column six for completeness
CU_Calc_Enrl_Spring_132[10,7] = CU_Calc_Enrl_Spring_132[10,6] - CU_Calc_Enrl_Spring_132[10,3]
#Scalars for 131 and 132 to be able to more easily tune the model
Scalar_131 = 0.74;
Scalar_S132 = 0.05;
Scalar_F132 = 0.03;
#Sets a fifth column in the Spring 132 data frame where it lists the predicted value for student #enrollment
CU_Calc_Enrl_Spring_132[1,6] = Scalar_131*CU_Calc_Enrl_Fall_131[1,3] + Scalar_F132*CU_Calc_Enrl_Fall_132[1,3]
#Sets a sixth column where it finds the difference between the prediction and the actual value.
CU_Calc_Enrl_Spring_132[1,7] = CU_Calc_Enrl_Spring_132[1,6] - CU_Calc_Enrl_Spring_132[1,3]
#A for loop that steps through all rows after the first
for (i in 2:nrow(CU_Calc_Enrl_Spring_132)) {
CU_Calc_Enrl_Spring_132[i,6] = (Scalar_131*CU_Calc_Enrl_Fall_131[i,3]) + (Scalar_S132*CU_Calc_Enrl_Spring_132[i-1,3]) + (Scalar_F132*CU_Calc_Enrl_Fall_132[i,3])
CU_Calc_Enrl_Spring_132[i,7] = CU_Calc_Enrl_Spring_132[i,6] - CU_Calc_Enrl_Spring_132[i,3]
}
#Sum of column 6 used to optimize
x = 0;
for (i in 1:nrow(CU_Calc_Enrl_Spring_132)) {
x = x + CU_Calc_Enrl_Spring_132[i,7]
}
x
#Scalars for 131 and 132 to be able to more easily tune the model
Scalar_131 = 0.74;
Scalar_S132 = 0.05;
Scalar_F132 = 0.03;
#Sets a fifth column in the Spring 132 data frame where it lists the predicted value for student #enrollment
CU_Calc_Enrl_Spring_132[1,6] = Scalar_131*CU_Calc_Enrl_Fall_131[1,3] + Scalar_F132*CU_Calc_Enrl_Fall_132[1,3]
#Sets a sixth column where it finds the difference between the prediction and the actual value.
CU_Calc_Enrl_Spring_132[1,7] = CU_Calc_Enrl_Spring_132[1,6] - CU_Calc_Enrl_Spring_132[1,3]
#A for loop that steps through all rows after the first
for (i in 2:nrow(CU_Calc_Enrl_Spring_132)) {
CU_Calc_Enrl_Spring_132[i,6] = (Scalar_131*CU_Calc_Enrl_Fall_131[i,3]) + (Scalar_S132*CU_Calc_Enrl_Spring_132[i-1,3]) + (Scalar_F132*CU_Calc_Enrl_Fall_132[i,3])
CU_Calc_Enrl_Spring_132[i,7] = CU_Calc_Enrl_Spring_132[i,6] - CU_Calc_Enrl_Spring_132[i,3]
}
#Sum of column 6 used to optimize
x = 0;
for (i in 1:9) {
x = x + CU_Calc_Enrl_Spring_132[i,7]
}
x
#Finally, adding a row to the 132 data frame to predict Spring 2024
CU_Calc_Enrl_Spring_132[10,1] = 4242
CU_Calc_Enrl_Spring_132[10,2] = "Spring 2024"
CU_Calc_Enrl_Spring_132[10,3] = 0
CU_Calc_Enrl_Spring_132[10,4] = 132
CU_Calc_Enrl_Spring_132[10,5] = "MA"
#Prediction value
CU_Calc_Enrl_Spring_132[10,6] = Scalar_S132*CU_Calc_Enrl_Spring_132[9,3] + Scalar_131*CU_Calc_Enrl_Fall_131[10,3] + Scalar_F132*CU_Calc_Enrl_Fall_132[9,3]
#Filling out column six for completeness
CU_Calc_Enrl_Spring_132[10,7] = CU_Calc_Enrl_Spring_132[10,6] - CU_Calc_Enrl_Spring_132[10,3]
#Scalars for 131 and 132 to be able to more easily tune the model
Scalar_131 = 0.74;
Scalar_S132 = 0.05;
Scalar_F132 = 0.04;
#Sets a fifth column in the Spring 132 data frame where it lists the predicted value for student #enrollment
CU_Calc_Enrl_Spring_132[1,6] = Scalar_131*CU_Calc_Enrl_Fall_131[1,3] + Scalar_F132*CU_Calc_Enrl_Fall_132[1,3]
#Sets a sixth column where it finds the difference between the prediction and the actual value.
CU_Calc_Enrl_Spring_132[1,7] = CU_Calc_Enrl_Spring_132[1,6] - CU_Calc_Enrl_Spring_132[1,3]
#A for loop that steps through all rows after the first
for (i in 2:nrow(CU_Calc_Enrl_Spring_132)) {
CU_Calc_Enrl_Spring_132[i,6] = (Scalar_131*CU_Calc_Enrl_Fall_131[i,3]) + (Scalar_S132*CU_Calc_Enrl_Spring_132[i-1,3]) + (Scalar_F132*CU_Calc_Enrl_Fall_132[i,3])
CU_Calc_Enrl_Spring_132[i,7] = CU_Calc_Enrl_Spring_132[i,6] - CU_Calc_Enrl_Spring_132[i,3]
}
#Sum of column 6 used to optimize; not including last row (prediction row)
x = 0;
for (i in 1:9) {
x = x + CU_Calc_Enrl_Spring_132[i,7]
}
x
#Scalars for 131 and 132 to be able to more easily tune the model
Scalar_131 = 0.74;
Scalar_S132 = 0.05;
Scalar_F132 = 0.05;
#Sets a fifth column in the Spring 132 data frame where it lists the predicted value for student #enrollment
CU_Calc_Enrl_Spring_132[1,6] = Scalar_131*CU_Calc_Enrl_Fall_131[1,3] + Scalar_F132*CU_Calc_Enrl_Fall_132[1,3]
#Sets a sixth column where it finds the difference between the prediction and the actual value.
CU_Calc_Enrl_Spring_132[1,7] = CU_Calc_Enrl_Spring_132[1,6] - CU_Calc_Enrl_Spring_132[1,3]
#A for loop that steps through all rows after the first
for (i in 2:nrow(CU_Calc_Enrl_Spring_132)) {
CU_Calc_Enrl_Spring_132[i,6] = (Scalar_131*CU_Calc_Enrl_Fall_131[i,3]) + (Scalar_S132*CU_Calc_Enrl_Spring_132[i-1,3]) + (Scalar_F132*CU_Calc_Enrl_Fall_132[i,3])
CU_Calc_Enrl_Spring_132[i,7] = CU_Calc_Enrl_Spring_132[i,6] - CU_Calc_Enrl_Spring_132[i,3]
}
#Sum of column 6 used to optimize; not including last row (prediction row)
x = 0;
for (i in 1:9) {
x = x + CU_Calc_Enrl_Spring_132[i,7]
}
x
#Finally, adding a row to the 132 data frame to predict Spring 2024
CU_Calc_Enrl_Spring_132[10,1] = 4242
CU_Calc_Enrl_Spring_132[10,2] = "Spring 2024"
CU_Calc_Enrl_Spring_132[10,3] = 0
CU_Calc_Enrl_Spring_132[10,4] = 132
CU_Calc_Enrl_Spring_132[10,5] = "MA"
#Prediction value
CU_Calc_Enrl_Spring_132[10,6] = Scalar_S132*CU_Calc_Enrl_Spring_132[9,3] + Scalar_131*CU_Calc_Enrl_Fall_131[10,3] + Scalar_F132*CU_Calc_Enrl_Fall_132[9,3]
#Filling out column six for completeness
CU_Calc_Enrl_Spring_132[10,7] = CU_Calc_Enrl_Spring_132[10,6] - CU_Calc_Enrl_Spring_132[10,3]
library(skimr)
library(readr)
library(tidyverse)
library(here)
CU_ACAD_DEPT_WHEN_OFF_ENRL <- read_csv(here("data_raw", "CU_ACAD_DEPT_WHEN_OFF_ENRL.csv"))
View(CU_ACAD_DEPT_WHEN_OFF_ENRL)
CU <- CU_ACAD_DEPT_WHEN_OFF_ENRL
skim(CU)
CU_Calc <- CU %>%
select(Subject, Catalog, Term...7, Term...8, Component, `Tot Enrl`) %>% distinct()
CU_Calc_1 <- filter(CU_Calc, Subject == "MA",  Catalog %in% c(120, 125, 131, 132), Component == "LEC")
head(CU_Calc_1)
CU_Calc_Enrl_Per_Term=CU_Calc_1 %>%
group_by(Catalog, Term...7, Term...8) %>%
mutate(Enrl_By_Term_Cat = sum(`Tot Enrl`)) %>%
distinct(Enrl_By_Term_Cat, Catalog, Subject)
head(CU_Calc_Enrl_Per_Term)
CU_Calc_Enrl_Fall_131 = CU_Calc_Enrl_Per_Term%>%
filter(Catalog == "131", Term...8 %in% c("Fall 2014", "Fall 2015", "Fall 2016", "Fall 2017", "Fall 2018", "Fall 2019", "Fall 2020", "Fall 2021", "Fall 2022", "Fall 2023"))
head(CU_Calc_Enrl_Fall_131)
CU_Calc_Enrl_Spring_132 = CU_Calc_Enrl_Per_Term%>%
filter(Catalog == "132", Term...8 %in% c("Spring 2014", "Spring 2015", "Spring 2016", "Spring 2017", "Spring 2018", "Spring 2019", "Spring 2020", "Spring 2021", "Spring 2022", "Spring 2023"))
head(CU_Calc_Enrl_Spring_132)
CU_Calc_Enrl_Fall_132 = CU_Calc_Enrl_Per_Term %>%
filter(Catalog == "132", Term...8 %in% c("Fall 2014", "Fall 2015", "Fall 2016", "Fall 2017", "Fall 2018", "Fall 2019", "Fall 2020", "Fall 2021", "Fall 2022", "Fall 2023"))
head(CU_Calc_Enrl_Fall_132)
CU_Calc_Enrl_Fall_132 = arrange(CU_Calc_Enrl_Fall_132, Term...7)
#Scalars for 131 and 132 to be able to more easily tune the model
Scalar_131 = 0.74;
Scalar_S132 = 0.05;
Scalar_F132 = 0.05;
#Sets a fifth column in the Spring 132 data frame where it lists the predicted value for student #enrollment
CU_Calc_Enrl_Spring_132[1,6] = Scalar_131*CU_Calc_Enrl_Fall_131[1,3] + Scalar_F132*CU_Calc_Enrl_Fall_132[1,3]
#Sets a sixth column where it finds the difference between the prediction and the actual value.
CU_Calc_Enrl_Spring_132[1,7] = CU_Calc_Enrl_Spring_132[1,6] - CU_Calc_Enrl_Spring_132[1,3]
#A for loop that steps through all rows after the first
for (i in 2:nrow(CU_Calc_Enrl_Spring_132)) {
CU_Calc_Enrl_Spring_132[i,6] = (Scalar_131*CU_Calc_Enrl_Fall_131[i,3]) + (Scalar_S132*CU_Calc_Enrl_Spring_132[i-1,3]) + (Scalar_F132*CU_Calc_Enrl_Fall_132[i,3])
CU_Calc_Enrl_Spring_132[i,7] = CU_Calc_Enrl_Spring_132[i,6] - CU_Calc_Enrl_Spring_132[i,3]
}
#Sum of column 6 used to optimize; not including last row (prediction row)
x = 0;
for (i in 1:9) {
x = x + CU_Calc_Enrl_Spring_132[i,7]
}
x
#Finally, adding a row to the 132 data frame to predict Spring 2024
CU_Calc_Enrl_Spring_132[10,1] = 4242
CU_Calc_Enrl_Spring_132[10,2] = "Spring 2024"
CU_Calc_Enrl_Spring_132[10,3] = 0
CU_Calc_Enrl_Spring_132[10,4] = 132
CU_Calc_Enrl_Spring_132[10,5] = "MA"
#Prediction value
CU_Calc_Enrl_Spring_132[10,6] = Scalar_S132*CU_Calc_Enrl_Spring_132[9,3] + Scalar_131*CU_Calc_Enrl_Fall_131[10,3] + Scalar_F132*CU_Calc_Enrl_Fall_132[9,3]
#Filling out column six for completeness
CU_Calc_Enrl_Spring_132[10,7] = CU_Calc_Enrl_Spring_132[10,6] - CU_Calc_Enrl_Spring_132[10,3]
